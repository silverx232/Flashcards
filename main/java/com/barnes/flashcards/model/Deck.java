package com.barnes.flashcards.model;

import androidx.annotation.Nullable;
import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.PrimaryKey;

import java.time.LocalDateTime;

/**
 * Class for a Deck.
 *
 * <p> This class defines a Deck. A deck contains information about the flashcards that reside in it.
 * Every flashcard must be part of a deck. The size of a deck should never be negative. </p>
 */
@Entity(tableName = "deck_table")
public class Deck {
    @PrimaryKey(autoGenerate = true)
    @ColumnInfo(name = "deck_id")
    private int deckId;

    // size should never be negative
    private int size;

    // Total guesses of a user. Will be periodically reduced to prevent stack overflow
    @ColumnInfo(name = "total_guesses")
    private int totalGuesses;

    // Total correct guesses of a user. Will be periodically reduced to prevent stack overflow.
    @ColumnInfo(name = "total_right")
    private int totalRight;

    private String title;

    @ColumnInfo(name = "time_reviewed")
    private LocalDateTime timeReviewed;

    /**
     * Default constructor for Deck.
     */
    public Deck() {
        timeReviewed = LocalDateTime.now();
    }

    /**
     * Constructor for Deck.
     *
     * <p> If size is negative, size is set to zero instead. </p>
     * @param deckId The ID of the deck in the database
     * @param size The number of flashcards the deck has
     * @param totalGuesses The total guesses of a user
     * @param totalRight The total correct guesses of a user
     * @param title The deck's title
     */
    public Deck(int deckId, int size, int totalGuesses, int totalRight, String title, LocalDateTime timeReviewed) {
        this.deckId = deckId;

        if (size < 0)
            size = 0;

        this.size = size;
        this.totalGuesses = totalGuesses;
        this.totalRight = totalRight;
        this.title = title;
        this.timeReviewed = timeReviewed;
    }

    /**
     * Getter for deckId.
     *
     * <p> This is the getter for the ID of a deck. An ID is autogenerated by the database. </p>
     * @return The ID of the deck
     */
    public int getDeckId() {
        return deckId;
    }

    /**
     * Setter for ID.
     *
     * <p> This is the setter for the ID of a deck. An ID is autogenerated by the database. </p>
     * @param deckId The ID the deck will have
     */
    public void setDeckId(int deckId) {
        this.deckId = deckId;
    }

    /**
     * Getter for size.
     *
     * <p> This is the getter for the size of a deck. The size is the number of flashcards a
     * deck has. </p>
     * @return The size of the deck
     */
    public int getSize() {
        return size;
    }

    /**
     * Setter for size.
     *
     * <p> This is the setter for the size of a deck. The size is the number of flashcards a
     * deck has. If size is negative, size is set to zero instead. </p>
     * @param size The size the deck will have
     */
    public void setSize(int size) {
        if (size < 0)
            size = 0;

        this.size = size;
    }

    /**
     * Getter for title.
     *
     * <p> This is the getter for the title of a deck. </p>
     * @return The title of the deck
     */
    public String getTitle() {
        return title;
    }

    /**
     * Setter for title.
     *
     * <p> This is the setter for the title of a deck. </p>
     * @param title The title the deck will have
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Getter for totalGuesses.
     *
     * <p> This is the getter for the total guesses of a user. totalGuesses and totalRight are
     * used to find the percentage of correct guesses. totalGuesses will be periodically reduced
     * to prevent stack overflow, and thus does not represent the actual total guesses of a user. </p>
     * @return The total guesses of a user
     */
    public int getTotalGuesses() {
        return totalGuesses;
    }

    /**
     * Setter for totalGuesses.
     *
     * <p> This is the setter for the total guesses of a user. totalGuesses and totalRight are
     * used to find the percentage of correct guesses. totalGuesses will be periodically reduced
     * to prevent stack overflow, and thus does not represent the actual total guesses of a user. </p>
     * @param totalGuesses The total guesses of a user
     */
    public void setTotalGuesses(int totalGuesses) {
        this.totalGuesses = totalGuesses;
    }

    /**
     * Getter for totalRight.
     *
     * <p> This is the getter for the total correct guesses of a user. totalGuesses and totalRight are
     * used to find the percentage of correct guesses. totalRight will be periodically reduced
     * to prevent stack overflow, and thus does not represent the actual total correct guesses of a user. </p>
     * @return The total correct guesses of a user
     */
    public int getTotalRight() {
        return totalRight;
    }

    /**
     * Setter for totalRight.
     *
     * <p> This is the setter for the total correct guesses of a user. totalGuesses and totalRight are
     * used to find the percentage of correct guesses. totalRight will be periodically reduced
     * to prevent stack overflow, and thus does not represent the actual total correct guesses of a user. </p>
     * @param totalRight The total correct guesses of a user
     */
    public void setTotalRight(int totalRight) {
        this.totalRight = totalRight;
    }

    /**
     * Getter for timeReviewed.
     *
     * <p> This is the getter for the last time the deck was reviewed. </p>
     * @return A LocalDateTime of the last time the deck was reviewed
     */
    public LocalDateTime getTimeReviewed() {
        return timeReviewed;
    }

    /**
     * Setter for timeReviewed.
     *
     * <p> This is the setter for the last time the deck was reviewed. </p>
     * @param timeReviewed The last time reviewed the deck will have
     */
    public void setTimeReviewed(LocalDateTime timeReviewed) {
        this.timeReviewed = timeReviewed;
    }

    /**
     * Increases the size of the deck by 1.
     */
    public void incrementSize() {
        size++;
    }

    /**
     * Decreases the size of the deck by 1.
     */
    public void decrementSize() {
        if (size > 0)
            size--;
    }

    /**
     * Indicates the user guessed a flashcard correctly.
     *
     * <p> This method increases the total correct guesses and total guesses by 1. It also checks
     * for stack overflow. </p>
     */
    public void guessedRight() {
        totalGuesses++;
        totalRight++;

        checkOverflow();
    }

    /**
     * Inidicates the user guessed a flashcard incorrectly.
     *
     * <p> This method increases the total guesses of a user. It also checks for stack overflow. </p>
     */
    public void guessedWrong() {
        totalGuesses++;

        checkOverflow();
    }

    /**
     * Gets the percent of correct guesses over total guesses.
     *
     * <p> This method finds the percent of correct user guesses over the total user guesses for
     * the deck. </p>
     * @return The percent of correct guesses over total guesses for the deck
     */
    public double getPercentRight() {
        // Check for division by 0
        if (totalGuesses > 0)
            return ((double) totalRight) / totalGuesses * 100;
        else
            return 0.0;
    }

    /**
     * Overrides the equals() method.
     *
     * @param obj The object it will be compared to
     * @return Returns true if obj is a Deck and has the same id
     */
    @Override
    public boolean equals(@Nullable Object obj) {
        if (obj instanceof Deck)
            return (deckId == ((Deck) obj).getDeckId());
        else
            return false;
    }

    /**
     * Overrides the toString() method.
     *
     * @return The Deck's title
     */
    @Override
    public String toString() {
        return title;
    }

    /**
     * Reduces the size of totalGuesses and totalRight if they are getting close to stack overflow.
     *
     * <p> This private method divides totalGuesses and totalRight by 2 if totalGuesses is greater
     * than or equal to 2 billion. This is to prevent stack overflow. If 2 is not a common
     * denominator, then the percentage of right guesses will be slightly off, but it won't be
     * enough off to really matter. </p>
     */
    private void checkOverflow() {
        if (totalGuesses >= 2_000_000_000) {
            totalGuesses /= 2;
            totalRight /= 2;
        }
    }
}
