package com.barnes.flashcards.model;

import androidx.annotation.Nullable;
import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.ForeignKey;
import androidx.room.PrimaryKey;

import java.util.Arrays;
import java.util.List;

/**
 * Class for a flashcard.
 *
 * <p> This class defines a Flashcard. A flashcard has a front and a back with user entered
 * information. Every flashcard must be part of a deck. </p>
 */
@Entity(tableName = "flashcard_table",
        foreignKeys = {@ForeignKey(entity = Deck.class,
                parentColumns = "deck_id",
                childColumns = "deck_id",
                onDelete = ForeignKey.CASCADE)} )
public class Flashcard {
    @PrimaryKey(autoGenerate = true)
    private int cardId;

    private String front;

    private String back;

    private Status status;

    // foreign key
    @ColumnInfo(name = "deck_id")
    private int deckId;

    /**
     * Default constructor for Flashcard.
     */
    public Flashcard() {
        status = Status.STILL_LEARNING;
    }

    /**
     * Constructor for Flashcard.
     *
     * @param cardId The ID of the flashcard in the database
     * @param front The user information for the "front" of the flashcard
     * @param back The user information for the "back" of the flashcard
     * @param status The status of the flashcard
     * @param deckId The ID of the deck that the flashcard belongs to
     */
    public Flashcard(int cardId, String front, String back, Status status, int deckId) {
        this.cardId = cardId;
        this.front = front;
        this.back = back;
        this.status = status;
        this.deckId = deckId;
    }

    /**
     * Getter for cardId.
     *
     * <p> This is the getter for the ID of a flashcard. An ID is autogenerated by the database. </p>
     * @return The ID of the flashcard
     */
    public int getCardId() {
        return cardId;
    }

    /**
     * Setter for cardId.
     *
     * <p> This is the setter for the ID of a flashcard. An ID is autogenerated by the database. </p>
     * @param cardId The ID the flashcard will have
     */
    public void setCardId(int cardId) {
        this.cardId = cardId;
    }

    /**
     * Getter for the front of a flashcard.
     *
     * @return The user entered information for the "front" of a flashcard
     */
    public String getFront() {
        return front;
    }

    /**
     * Setter for the front of a flashcard.
     *
     * @param front The user entered information for the "front" of a flashcard
     */
    public void setFront(String front) {
        this.front = front;
    }

    /**
     * Getter for the back of a flashcard.
     *
     * @return The user entered information for the "back" of a flashcard
     */
    public String getBack() {
        return back;
    }

    /**
     * Setter for the back of a flashcard.
     *
     * @param back The user entered information for the "back" of a flashcard
     */
    public void setBack(String back) {
        this.back = back;
    }

    /**
     * Getter for deckId.
     *
     * <p> This is the getter for the ID of the deck the flashcard belongs to. </p>
     * @return The ID of the deck the flashcard belongs to
     */
    public int getDeckId() {
        return deckId;
    }

    /**
     * Setter for deckId.
     *
     * <p> This is the setter for the ID of the deck the flashcard belongs to. </p>
     * @param deckId The ID of the deck the flashcard belongs to
     */
    public void setDeckId(int deckId) {
        this.deckId = deckId;
    }

    /**
     * Getter for status.
     *
     * <p> This is the getter for the Status of a flashcard. </p>
     * @return The Status of a flashcard
     */
    public Status getStatus() {
        return status;
    }

    /**
     * Setter for status.
     *
     * <p> This is the setter for the Status of a flashcard. </p>
     * @param status The Status the flashcard will have
     */
    public void setStatus(Status status) {
        this.status = status;
    }

    /**
     * Overrides the equals() method.
     *
     * @param obj The object it will be compared to
     * @return Returns true if obj is a Flaschard and has the same id
     */
    @Override
    public boolean equals(@Nullable Object obj) {
        if (obj instanceof Flashcard)
            return (cardId == ((Flashcard) obj).getCardId());
        else
            return false;
    }

    /**
     * Overrides the toString() method.
     *
     * @return The flashcard's contents
     */
    @Override
    public String toString() {
        return "Flashcard{" +
                "cardId=" + cardId +
                ", front='" + front + '\'' +
                ", back='" + back + '\'' +
//                ", status=" + status +
//                ", deckId=" + deckId +
                '}';
    }

    /**
     * Enum for a flashcard.
     *
     * <p> This is an enumeration for a flashcard. It contains the Flashcard's status. </p>
     */
    public enum Status {
        STILL_LEARNING("Still learning"),
        LEARNED("Learned"),
        ARCHIVED("Archived");

        private String name;

        public static final List<Status> statusList =
                Arrays.asList(STILL_LEARNING, LEARNED, ARCHIVED);

        Status(String name) {
            this.name = name;
        }

        /**
         * Override of toString().
         *
         * <p> This method overrides the toString() method and returns the Status in a formatted
         * String. </p>
         * @return Returns the name of the Status
         */
        @Override
        public String toString() {
            return name;
        }
    }
}
